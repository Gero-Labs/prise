name: Deployment
on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: deployment-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  packages: read

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      # 1) Check out source code
      - name: Check out code
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2) Set up Java
      - name: Set up JDK 17
        uses: actions/setup-java@v5
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3) Build both indexer and webserver
      - name: Gradle build
        run: ./gradlew clean build -x test

      # 4) Install Tailscale for MinIO access
      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Connect to Tailscale
        run: |
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname gha-prise-deployer --accept-routes

      - name: Install MinIO Client
        run: |
          curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          sudo mv mc /usr/local/bin/

      - name: Configure mc alias
        run: |
          mc alias set myminio ${{ secrets.MINIO_ENDPOINT }} ${{ secrets.MINIO_ACCESS_KEY }} ${{ secrets.MINIO_SECRET_KEY }}

      # 5) Upload artifacts to MinIO
      - name: Upload JARs to MinIO
        run: |
          mc put indexer/build/libs/indexer.jar myminio/prise/gha-artifacts/indexer.jar
          mc put webserver/build/libs/webserver.jar myminio/prise/gha-artifacts/webserver.jar

      - name: Logout from Tailscale
        if: always()
        run: |
          sudo tailscale logout || true

  deploy:
    name: Push Images to Docker Hub
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    needs: build
    steps:
      # 1) Check out code
      - name: Check out code
        uses: actions/checkout@v5

      # 2) Determine and bump version
      - name: Get and increment version
        id: version
        run: |
          # Read version from indexer build.gradle.kts
          CURRENT_VERSION=$(grep '^version = ' indexer/build.gradle.kts | sed 's/version = "\(.*\)"/\1/')
          echo "Current version is: $CURRENT_VERSION"

          # Parse version (format: MAJOR.MINOR.PATCH)
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"

          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"

          echo "Bumping version to: $NEW_VERSION"
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

      # 3) Update version in build files
      - name: Bump version in build.gradle.kts
        run: |
          # Update indexer version
          sed -i 's/^version = ".*"/version = "${{ env.VERSION }}"/' indexer/build.gradle.kts
          # Update webserver version
          sed -i 's/^version = ".*"/version = "${{ env.VERSION }}"/' webserver/build.gradle.kts

      # 4) Commit version bump
      - name: Commit version bump
        run: |
          git config --global user.name 'edridudi'
          git config --global user.email "edridudi@users.noreply.github.com"
          git add indexer/build.gradle.kts webserver/build.gradle.kts
          if ! git diff-index --quiet HEAD --; then
            git commit -m "chore: bump version to ${{ env.VERSION }} [skip ci]"
            git push
          else
            echo "No changes to commit, skipping version bump commit."
          fi

      # 5) Download artifacts from MinIO
      - name: Install Tailscale
        run: |
          curl -fsSL https://tailscale.com/install.sh | sh

      - name: Connect to Tailscale
        run: |
          sudo tailscale up --authkey ${{ secrets.TAILSCALE_AUTHKEY }} --hostname gha-prise-deployer --accept-routes

      - name: Install MinIO Client
        run: |
          curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          sudo mv mc /usr/local/bin/

      - name: Configure mc alias
        run: |
          mc alias set myminio ${{ secrets.MINIO_ENDPOINT }} ${{ secrets.MINIO_ACCESS_KEY }} ${{ secrets.MINIO_SECRET_KEY }}

      - name: Download JARs from MinIO
        run: |
          mkdir -p indexer/build/libs webserver/build/libs
          mc get myminio/prise/gha-artifacts/indexer.jar indexer/build/libs/indexer.jar
          mc get myminio/prise/gha-artifacts/webserver.jar webserver/build/libs/webserver.jar

      # 6) Build and push Docker images
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build and push indexer image
        run: |
          cd indexer
          docker build --platform linux/amd64 -t edridudi/gero:prise-indexer-v${{ env.VERSION }} .
          docker push edridudi/gero:prise-indexer-v${{ env.VERSION }}

      - name: Build and push webserver image
        run: |
          cd webserver
          docker build --platform linux/amd64 -t edridudi/gero:prise-v${{ env.VERSION }} .
          docker push edridudi/gero:prise-v${{ env.VERSION }}

      # 7) Create Git tag
      - name: Create and push Git tag
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/v${{ env.VERSION }}"; then
            echo "Tag v${{ env.VERSION }} already exists, skipping tag creation"
          else
            echo "Creating new tag v${{ env.VERSION }}"
            git tag v${{ env.VERSION }}
            git push origin v${{ env.VERSION }}
          fi

      - name: Logout from Tailscale
        if: always()
        run: |
          sudo tailscale logout || true

  deploy-k8s:
    name: Deploy to Kubernetes Cluster
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Configure Kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config

      - name: Update Indexer Deployment
        run: |
          kubectl set image deployment/prise-indexer \
            indexer=edridudi/gero:prise-indexer-v${{ needs.deploy.outputs.version }}

      - name: Update Webserver Deployment
        run: |
          kubectl set image deployment/prise-app \
            app=edridudi/gero:prise-v${{ needs.deploy.outputs.version }}

      - name: Wait for Indexer Rollout
        run: |
          kubectl rollout status deployment/prise-indexer --timeout=5m

      - name: Wait for Webserver Rollout
        run: |
          kubectl rollout status deployment/prise-app --timeout=5m
